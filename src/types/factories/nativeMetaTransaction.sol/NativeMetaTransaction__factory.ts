/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  NativeMetaTransaction,
  NativeMetaTransactionInterface,
} from "../../nativeMetaTransaction.sol/NativeMetaTransaction";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "relayerAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "functionSignature",
        type: "bytes",
      },
    ],
    name: "MetaTransactionExecuted",
    type: "event",
  },
  {
    inputs: [],
    name: "ERC712_VERSION",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "functionSignature",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "sigR",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "sigS",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "sigV",
        type: "uint8",
      },
    ],
    name: "executeMetaTransaction",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getChainId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDomainSeperator",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526000805460ff1916905534801561001a57600080fd5b506107b68061002a6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806320379ee51161005057806320379ee5146100b55780632d0335ab146100c75780633408e470146100f057600080fd5b80630c53c51c1461006c5780630f7e597014610095575b600080fd5b61007f61007a366004610541565b6100f6565b60405161008c9190610683565b60405180910390f35b61007f604051806040016040528060018152602001603160f81b81525081565b6001545b60405190815260200161008c565b6100b96100d536600461069d565b6001600160a01b031660009081526002602052604090205490565b466100b9565b60408051606081810183526001600160a01b0388166000818152600260209081529085902054845283015291810186905261013487828787876102e5565b61018f5760405162461bcd60e51b815260206004820152602160248201527f5369676e657220616e64207369676e617475726520646f206e6f74206d6174636044820152600d60fb1b60648201526084015b60405180910390fd5b6001600160a01b0387166000908152600260205260409020546101b39060016103ed565b6001600160a01b0388166000908152600260205260409081902091909155517f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b9061020390899033908a906106b8565b60405180910390a1600080306001600160a01b0316888a60405160200161022b9291906106ed565b60408051601f198184030181529082905261024591610724565b6000604051808303816000865af19150503d8060008114610282576040519150601f19603f3d011682016040523d82523d6000602084013e610287565b606091505b5091509150816102d95760405162461bcd60e51b815260206004820152601c60248201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c000000006044820152606401610186565b98975050505050505050565b60006001600160a01b0386166103635760405162461bcd60e51b815260206004820152602560248201527f4e61746976654d6574615472616e73616374696f6e3a20494e56414c49445f5360448201527f49474e45520000000000000000000000000000000000000000000000000000006064820152608401610186565b600161037661037187610451565b6104ce565b6040805160008152602081018083529290925260ff851690820152606081018690526080810185905260a0016020604051602081039080840390855afa1580156103c4573d6000803e3d6000fd5b505050602060405103516001600160a01b0316866001600160a01b031614905095945050505050565b6000826103fa8382610740565b915081101561044b5760405162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006044820152606401610186565b92915050565b600060405180608001604052806043815260200161076760439139805160209182012083518483015160408087015180519086012090516104b1950193845260208401929092526001600160a01b03166040830152606082015260800190565b604051602081830303815290604052805190602001209050919050565b60006104d960015490565b60405161190160f01b60208201526022810191909152604281018390526062016104b1565b80356001600160a01b038116811461051557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b803560ff8116811461051557600080fd5b600080600080600060a0868803121561055957600080fd5b610562866104fe565b9450602086013567ffffffffffffffff8082111561057f57600080fd5b818801915088601f83011261059357600080fd5b8135818111156105a5576105a561051a565b604051601f8201601f19908116603f011681019083821181831017156105cd576105cd61051a565b816040528281528b60208487010111156105e657600080fd5b826020860160208301376000602084830101528098505050505050604086013592506060860135915061061b60808701610530565b90509295509295909350565b60005b8381101561064257818101518382015260200161062a565b83811115610651576000848401525b50505050565b6000815180845261066f816020860160208601610627565b601f01601f19169290920160200192915050565b6020815260006106966020830184610657565b9392505050565b6000602082840312156106af57600080fd5b610696826104fe565b60006001600160a01b038086168352808516602084015250606060408301526106e46060830184610657565b95945050505050565b600083516106ff818460208801610627565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b60008251610736818460208701610627565b9190910192915050565b6000821982111561076157634e487b7160e01b600052601160045260246000fd5b50019056fe4d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e617475726529a164736f6c634300080d000a";

type NativeMetaTransactionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NativeMetaTransactionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NativeMetaTransaction__factory extends ContractFactory {
  constructor(...args: NativeMetaTransactionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<NativeMetaTransaction> {
    return super.deploy(overrides || {}) as Promise<NativeMetaTransaction>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NativeMetaTransaction {
    return super.attach(address) as NativeMetaTransaction;
  }
  override connect(signer: Signer): NativeMetaTransaction__factory {
    return super.connect(signer) as NativeMetaTransaction__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NativeMetaTransactionInterface {
    return new utils.Interface(_abi) as NativeMetaTransactionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NativeMetaTransaction {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as NativeMetaTransaction;
  }
}
